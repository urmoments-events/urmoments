name: Deploy Next.js static site to GitHub Pages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive environment for project pages
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          SITE_URL="${{ vars.SITE_URL }}"
          if [ -n "$SITE_URL" ]; then
            # Extract path portion from SITE_URL (if any)
            PATH_PART=$(echo "$SITE_URL" | sed -E 's#https?://[^/]+(/.*)?#\1#')
            if [ -n "$PATH_PART" ] && [ "$PATH_PART" != "/" ]; then
              BASE_PATH="/$(echo "$PATH_PART" | cut -d'/' -f2)"
            else
              BASE_PATH=""
            fi
            echo "NEXT_PUBLIC_SITE_URL=$SITE_URL" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_BASE_PATH=$BASE_PATH" >> $GITHUB_ENV
          else
            # Fallback to project pages style base path
            echo "NEXT_PUBLIC_BASE_PATH=/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Create env.js from GH Pages environment vars
        run: |
          : > public/env.js
          echo "window.__ENV__ = {" >> public/env.js
          if [ -n "${{ secrets.FORMSPREE_ACTION_URL }}" ]; then echo "  NEXT_PUBLIC_FORMSPREE_ACTION_URL: '${{ secrets.FORMSPREE_ACTION_URL }}'," >> public/env.js; fi
          if [ -n "${{ vars.SITE_URL }}" ]; then echo "  NEXT_PUBLIC_SITE_URL: '${{ vars.SITE_URL }}'" >> public/env.js; fi
          if [ -n "$NEXT_PUBLIC_BASE_PATH" ]; then echo "  NEXT_PUBLIC_BASE_PATH: '$NEXT_PUBLIC_BASE_PATH'" >> public/env.js; fi
          echo "};" >> public/env.js
          # Generate CNAME when using a custom domain
          if [ -n "${{ vars.SITE_URL }}" ]; then
            HOST=$(echo "${{ vars.SITE_URL }}" | sed -E 's#https?://([^/]+)/?.*#\1#')
            if ! echo "$HOST" | grep -qi 'github.io'; then
              echo "$HOST" > public/CNAME
              echo "Created public/CNAME with $HOST"
            fi
          fi

      - name: Build
        run: npm run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: out

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

